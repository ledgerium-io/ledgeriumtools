const ethUtils = require('ethereumjs-util');
const gasLimit = 9007199254740000;
const blockHeaders = [
	{
	    ParentHash  : Buffer.from([97, 31, 6, 197, 241, 69, 55, 85, 182, 152, 161, 68, 235, 43, 149, 102, 1, 167, 20, 17, 141, 211, 84, 94, 140, 211, 37, 168, 5, 189, 164, 74]),
	    UncleHash   : Buffer.from([29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71]),
	    Coinbase    : Buffer.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
	    Root        : Buffer.from([2, 88, 237, 2, 216, 182, 130, 90, 40, 209, 94, 247, 218, 170, 119, 106, 52, 26, 79, 136, 221, 214, 4, 47, 78, 198, 63, 183, 97, 86, 145, 95]),
	    TxHash      : Buffer.from([86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33]),
	    ReceiptHash : Buffer.from([86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33]),
	    Bloom       : Buffer.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
	    Difficulty  : Buffer.from("0000000000000001",'hex'), // not the same as providing 1 as gas price (refer EIP 650)
	    Number      : ethUtils.intToBuffer(1),               // same as providing 1 as the integer gas limit and same as "0x1"
	    GasLimit    : Buffer.from("1FFFFFFFFFFC20","hex"),   // same as giving the numerical value of gas
	    GasUsed     : '0x',//ethUtils.intToBuffer(0),               // not the same as giving the numerical value 0 but same as gicing "0x0"
	    Time        : ethUtils.intToBuffer(1558496061),      // same as giving the integer value
	    Extra       : Buffer.from([216, 131, 1, 8, 12, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 49, 46, 57, 133, 108, 105, 110, 117, 120, 0, 0, 0, 0, 0, 0, 0, 248, 175, 248, 105, 148, 34, 150, 54, 92, 7, 77, 184, 190, 206, 125, 132, 67, 209, 236, 226, 35, 132, 174, 30, 231, 148, 161, 137, 95, 179, 70, 27, 17, 88, 114, 196, 109, 114, 152, 184, 79, 21, 196, 61, 77, 177, 148, 190, 250, 1, 149, 117, 149, 134, 163, 40, 80, 35, 57, 249, 66, 11, 138, 102, 3, 188, 130, 148, 199, 168, 158, 156, 45, 90, 205, 48, 207, 120, 248, 169, 239, 71, 119, 193, 11, 182, 154, 7, 148, 210, 93, 241, 87, 210, 166, 78, 94, 186, 75, 193, 54, 63, 90, 56, 110, 195, 97, 84, 243, 184, 65, 38, 223, 213, 48, 92, 234, 169, 188, 66, 15, 28, 219, 21, 227, 50, 232, 123, 176, 52, 82, 246, 244, 239, 65, 161, 193, 200, 18, 44, 30, 132, 125, 103, 35, 137, 153, 43, 88, 141, 61, 183, 43, 25, 118, 203, 152, 225, 109, 218, 163, 240, 132, 35, 106, 94, 161, 147, 138, 159, 242, 208, 239, 61, 80, 1, 192]),
	    MixDigest   : Buffer.from([99, 116, 105, 99, 97, 108, 32, 98, 121, 122, 97, 110, 116, 105, 110, 101, 32, 102, 97, 117, 108, 116, 32, 116, 111, 108, 101, 114, 97, 110, 99, 101]),
	    Nonce       : Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])  // same as "0x0000000000000000" but not the same as 0 (refer EIP 650)
	},
	{
	    ParentHash: Buffer.from([217, 39, 57, 132, 41, 5, 79, 116, 116, 181, 217, 105, 38, 108, 103, 174, 247, 36, 201, 91, 216, 110, 191, 13, 21, 61, 116, 69, 244, 44, 129, 33]),
	    UncleHash: Buffer.from([29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71]),
	    Coinbase: Buffer.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
	    Root: Buffer.from([171, 98, 56, 137, 220, 249, 53, 190, 119, 80, 22, 143, 182, 88, 72, 43, 39, 68, 162, 206, 19, 104, 53, 143, 131, 52, 47, 10, 49, 113, 107, 63]),
	    TxHash: Buffer.from([83, 141, 123, 59, 41, 132, 119, 103, 99, 103, 20, 86, 254, 140, 97, 44, 175, 93, 72, 220, 180, 31, 42, 62, 179, 151, 247, 98, 166, 252, 228, 236]),
	    ReceiptHash: Buffer.from([109, 1, 178, 133, 9, 75, 47, 46, 182, 156, 227, 148, 184, 141, 144, 18, 248, 175, 96, 126, 114, 194, 126, 230, 99, 167, 122, 246, 213, 151, 208, 161]),
	    Bloom: Buffer.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
	    Difficulty: 1,
	    Number: 2,
	    GasLimit: 9007199254740000,
	    GasUsed: 306526,
	    Time: 1558496066,
	    Extra: Buffer.from([216, 131, 1, 8, 12, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 49, 46, 57, 133, 108, 105, 110, 117, 120, 0, 0, 0, 0, 0, 0, 0, 249, 1, 121, 248, 105, 148, 34, 150, 54, 92, 7, 77, 184, 190, 206, 125, 132, 67, 209, 236, 226, 35, 132, 174, 30, 231, 148, 161, 137, 95, 179, 70, 27, 17, 88, 114, 196, 109, 114, 152, 184, 79, 21, 196, 61, 77, 177, 148, 190, 250, 1, 149, 117, 149, 134, 163, 40, 80, 35, 57, 249, 66, 11, 138, 102, 3, 188, 130, 148, 199, 168, 158, 156, 45, 90, 205, 48, 207, 120, 248, 169, 239, 71, 119, 193, 11, 182, 154, 7, 148, 210, 93, 241, 87, 210, 166, 78, 94, 186, 75, 193, 54, 63, 90, 56, 110, 195, 97, 84, 243, 184, 65, 23, 249, 8, 253, 164, 181, 175, 193, 139, 216, 2, 180, 71, 174, 252, 133, 220, 38, 12, 232, 246, 203, 30, 52, 217, 160, 186, 239, 47, 132, 60, 206, 97, 12, 67, 235, 202, 224, 188, 180, 136, 32, 104, 105, 107, 133, 230, 252, 250, 111, 204, 105, 187, 169, 41, 172, 59, 61, 148, 222, 42, 118, 70, 37, 1, 248, 201, 184, 65, 141, 111, 28, 122, 177, 137, 191, 141, 49, 111, 0, 70, 40, 110, 49, 144, 199, 93, 79, 58, 198, 251, 40, 43, 3, 48, 83, 62, 231, 43, 35, 151, 126, 143, 77, 85, 80, 4, 186, 223, 177, 142, 21, 12, 166, 218, 118, 155, 219, 187, 168, 39, 73, 48, 86, 252, 240, 189, 65, 195, 77, 77, 28, 171, 0, 184, 65, 151, 19, 127, 244, 78, 234, 128, 166, 242, 148, 138, 101, 117, 118, 85, 248, 160, 146, 36, 251, 105, 234, 102, 181, 241, 114, 1, 248, 142, 52, 19, 112, 95, 151, 242, 18, 244, 168, 203, 233, 37, 172, 87, 189, 122, 141, 199, 171, 47, 200, 89, 247, 212, 107, 15, 154, 253, 228, 42, 205, 44, 167, 21, 82, 0, 184, 65, 31, 167, 75, 158, 235, 64, 132, 218, 89, 252, 235, 85, 114, 161, 192, 3, 108, 112, 113, 210, 21, 180, 247, 106, 86, 89, 242, 3, 48, 41, 194, 139, 78, 219, 215, 191, 26, 159, 247, 96, 8, 6, 19, 37, 223, 110, 114, 21, 43, 229, 86, 221, 127, 219, 63, 217, 102, 90, 184, 48, 141, 176, 48, 63, 1]),
	    MixDigest: Buffer.from([99, 116, 105, 99, 97, 108, 32, 98, 121, 122, 97, 110, 116, 105, 110, 101, 32, 102, 97, 117, 108, 116, 32, 116, 111, 108, 101, 114, 97, 110, 99, 101]),
	    Nonce: Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])
	}
];

const fullBlocks = [
	{
	  difficulty: 1,
	  extraData: "0xd88301080c846765746888676f312e31312e39856c696e757800000000000000f90179f869942296365c074db8bece7d8443d1ece22384ae1ee794a1895fb3461b115872c46d7298b84f15c43d4db194befa0195759586a328502339f9420b8a6603bc8294c7a89e9c2d5acd30cf78f8a9ef4777c10bb69a0794d25df157d2a64e5eba4bc1363f5a386ec36154f3b84126dfd5305ceaa9bc420f1cdb15e332e87bb03452f6f4ef41a1c1c8122c1e847d672389992b588d3db72b1976cb98e16ddaa3f084236a5ea1938a9ff2d0ef3d5001f8c9b841a0caf16be50b7707ad78186e4fedb8be4da835317ab6d42c68cb04ec286947786c95cf7dd7e7eb66252a9cefea2946b4ce9e8c3f09ea6aa3e9f01e17694a242801b841e45667269d86180305c44434ee9538c7297be13ae0376d3398d4e266afd50ab935c9b90a6af26f7f1308c33f4f35930fa8897535ab074d85c6daa3657a454ca301b8410c70512911c8e3fbdd8d1c5737c129abcf21701716fc87db546b51358a275792692569706a75574001facc94325a875520e5d00881f9a8b025cf53dbf72111ed00",
	  gasLimit: 9007199254740000,
	  gasUsed: 0,
	  hash: "0xd927398429054f7474b5d969266c67aef724c95bd86ebf0d153d7445f42c8121",
	  logsBloom: "0x
	  miner: "0x0000000000000000000000000000000000000000",
	  mixHash: "0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365",
	  nonce: "0x0000000000000000",
	  number: 1,
	  parentHash: "0x611f06c5f1453755b698a144eb2b956601a714118dd3545e8cd325a805bda44a",
	  receiptsRoot: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
	  sha3Uncles: "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
	  size: 926,
	  stateRoot: "0x0258ed02d8b6825a28d15ef7daaa776a341a4f88ddd6042f4ec63fb76156915f",
	  timestamp: 1558496061,
	  totalDifficulty: 2,
	  transactions: [],
	  transactionsRoot: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
	  uncles: []
	},
	{
	  difficulty: 1,
	  extraData: "0xd88301080c846765746888676f312e31312e39856c696e757800000000000000f90179f869942296365c074db8bece7d8443d1ece22384ae1ee794a1895fb3461b115872c46d7298b84f15c43d4db194befa0195759586a328502339f9420b8a6603bc8294c7a89e9c2d5acd30cf78f8a9ef4777c10bb69a0794d25df157d2a64e5eba4bc1363f5a386ec36154f3b84117f908fda4b5afc18bd802b447aefc85dc260ce8f6cb1e34d9a0baef2f843cce610c43ebcae0bcb4882068696b85e6fcfa6fcc69bba929ac3b3d94de2a76462501f8c9b8418d6f1c7ab189bf8d316f0046286e3190c75d4f3ac6fb282b0330533ee72b23977e8f4d555004badfb18e150ca6da769bdbbba827493056fcf0bd41c34d4d1cab00b84197137ff44eea80a6f2948a65757655f8a09224fb69ea66b5f17201f88e3413705f97f212f4a8cbe925ac57bd7a8dc7ab2fc859f7d46b0f9afde42acd2ca7155200b8411fa74b9eeb4084da59fceb5572a1c0036c7071d215b4f76a5659f2033029c28b4edbd7bf1a9ff76008061325df6e72152be556dd7fdb3fd9665ab8308db0303f01",
	  gasLimit: 9007199254740000,
	  gasUsed: 306526,
	  hash: "0xaff2aa627f8ca120ec60a639eab937727aa8bd02725b4f154003f1752a36ecb1",
	  logsBloom: "0x
	  miner: "0x0000000000000000000000000000000000000000",
	  mixHash: "0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365",
	  nonce: "0x0000000000000000",
	  number: 2,
	  parentHash: "0xd927398429054f7474b5d969266c67aef724c95bd86ebf0d153d7445f42c8121",
	  receiptsRoot: "0x6d01b285094b2f2eb69ce394b88d9012f8af607e72c27ee663a77af6d597d0a1",
	  sha3Uncles: "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
	  size: 1133,
	  stateRoot: "0xab623889dcf935be7750168fb658482b2744a2ce1368358f83342f0a31716b3f",
	  timestamp: 1558496066,
	  totalDifficulty: 3,
	  transactions: ["0x557546b78f5b395f1b5f720512ad2fa20058bdd4fd39b5bf4e3a518e44c8c3a7"],
	  transactionsRoot: "0x538d7b3b2984776763671456fe8c612caf5d48dcb41f2a3eb397f762a6fce4ec",
	  uncles: []
	}
];

const removeSealAndCreateHeader = (header)=>{
	const rlpArray = [];
	rlpArray.push(header['ParentHash']);
	rlpArray.push(header['UncleHash']);
	rlpArray.push(header['Coinbase']);
	rlpArray.push(header['Root']);
	rlpArray.push(header['TxHash']);
	rlpArray.push(header['ReceiptHash']);
	rlpArray.push(header['Bloom']);
	rlpArray.push(header['Difficulty']);
	rlpArray.push(header['Number']);
	rlpArray.push(header['GasLimit']);
	rlpArray.push(header['GasUsed']);
	rlpArray.push(header['Time']);
	let extraData   = header['Extra'].toString('hex');
	let vanity      = extraData.slice(0,64);
	let decodedED   = ethUtils.rlp.decode('0x'+extraData.slice(64, extraData.length));
	let seal        = decodedED[1];
	decodedED[1]    = Buffer.from("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",'hex');
	// decodedED is not the same if signature is only 0x0 but as per genesis config full signature is given
	let sigEd       = vanity + ethUtils.rlp.encode(decodedED).toString('hex');   // vanity needed as per /core/types/istanbul.go IstanbulFilteredHeader
	console.log(decodedED);
	rlpArray.push(Buffer.from(sigEd,'hex'));
	rlpArray.push(header['MixDigest']);
	rlpArray.push(header['Nonce']);
	return {
		seal : seal,
		rlp  : rlpArray
	}
}


const blockData = removeSealAndCreateHeader(blockHeaders[0]);
//console.log(blockData);
const rlpHash   = ethUtils.rlphash(blockData.rlp);
const seal      = ethUtils.fromRpcSig(blockData.seal);
const address   = '0x'+ethUtils.publicToAddress(ethUtils.ecrecover(rlpHash, seal.v, seal.r, seal.s)).toString('hex');

console.log(address);

/*const rlp       = ethUtils.rlp.encode(blockData.rlp);
const keccak    = ethUtils.keccak256(rlp);
console.log(keccak);*/


/*
0xA1895fb3461B115872C46d7298b84f15c43d4Db1
0xD25df157D2a64e5EBa4BC1363f5A386ec36154f3
0x2296365c074db8beCE7D8443D1ECE22384aE1Ee7
0xC7a89E9C2D5ACD30Cf78f8A9Ef4777C10Bb69A07
*/